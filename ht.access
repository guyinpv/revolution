###############################################################################
# MODX HTACCESS DIRECTIVES
###############################################################################
# -----------------------------------------------------------------------------
# If you use Apache, rename this file from 'ht.access' to '.htaccess'.
# TODO: Link to docs regarding htaccess settings and additional config.
# TODO: Mention Nginx and link to docs regarding that configuration if used.
# -----------------------------------------------------------------------------

# THESE OTHER ISSUES MAY EFFECT HTACCESS
# https://github.com/modxcms/revolution/issues/14568
# https://github.com/modxcms/revolution/issues/13259
# https://github.com/modxcms/revolution/issues/13241
# https://github.com/modxcms/revolution/issues/12194


# -----------------------------------------------------------------------------
# Follow symbolic links. If your host gives a 500 error, try uncommenting the
# +SymLinksifOwnerMatch setting and comment +FollowSymLinks. If that doesn't
# work, switch back or comment out entirely.
# -----------------------------------------------------------------------------
Options +FollowSymLinks
# Options +SymLinksifOwnerMatch


# -----------------------------------------------------------------------------
# Don't show directory indexes, prevents people from trying to browse random
# folders all over your site. Unless you need this, leave it on for security.
# -----------------------------------------------------------------------------
<IfModule mod_autoindex.c>
    Options -Indexes
</IfModule>


# -----------------------------------------------------------------------------
# Protect MODX system files from public access.
# TODO: choose what to protect, if anything, or remove this section
# -----------------------------------------------------------------------------
<FilesMatch "\.(inc|info|info\.json|module|sh|sql)$|^\..*$|composer\.(json|lock)$">
  <IfModule mod_authz_core.c>
    Require all denied
  </IfModule>
  <IfModule !mod_authz_core.c>
    Order allow,deny
  </IfModule>
</FilesMatch>


# -----------------------------------------------------------------------------
# MODX rewrite rules. Requirest Apache mod_rewrite.
# -----------------------------------------------------------------------------
<IfModule mod_rewrite.c>
  RewriteEngine On
  
  # ---------------------------------------------------------------------------
  # If MODX is installed in a subdirectory, change RewriteBase to point there.
  # E.g., "/modx" if your installation is in a "modx" subdirectory.
  # ---------------------------------------------------------------------------
  RewriteBase /
  
  
  # ---------------------------------------------------------------------------
  # Protect MODX system URLs.
  # TODO: Adjust for any additional protections against files and folders by their URI. Or remove all of this. These samples are from Processwire
  # ---------------------------------------------------------------------------
  # Block access to any htaccess files
  RewriteCond %{REQUEST_URI} (^|/)\.htaccess$ [NC,OR]
  # Block access to protected assets directories
  RewriteCond %{REQUEST_URI} (^|/)(site|site-[^/]+)/assets/(cache|logs|backups|sessions|config|install|tmp)($|/.*$) [OR]
  # Block acceess to the /site/install/ directory
  RewriteCond %{REQUEST_URI} (^|/)(site|site-[^/]+)/install($|/.*$) [OR]
  # Block dirs in /site/assets/ dirs that start with a hyphen
  RewriteCond %{REQUEST_URI} (^|/)(site|site-[^/]+)/assets.*/-.+/.* [OR]
  # Block access to /wire/config.php, /site/config.php, /site/config-dev.php, and /wire/index.config.php
  RewriteCond %{REQUEST_URI} (^|/)(wire|site|site-[^/]+)/(config|index\.config|config-dev)\.php$ [OR]
  # Block access to any PHP-based files in /templates-admin/
  RewriteCond %{REQUEST_URI} (^|/)(wire|site|site-[^/]+)/templates-admin($|/|/.*\.(php|html?|tpl|inc))$ [OR]
  # Block access to any PHP or markup files in /site/templates/
  RewriteCond %{REQUEST_URI} (^|/)(site|site-[^/]+)/templates($|/|/.*\.(php|html?|tpl|inc))$ [OR]
  # Block access to any PHP files in /site/assets/
  RewriteCond %{REQUEST_URI} (^|/)(site|site-[^/]+)/assets($|/|/.*\.php)$ [OR]
  # Block access to any PHP files in core or core module directories
  RewriteCond %{REQUEST_URI} (^|/)wire/(core|modules)/.*\.(php|inc|tpl|module|info\.json)$ [OR]
  # Block access to any PHP files in /site/modules/
  RewriteCond %{REQUEST_URI} (^|/)(site|site-[^/]+)/modules/.*\.(php|inc|tpl|module|info\.json)$ [OR]
  # Block access to any software identifying txt files
  RewriteCond %{REQUEST_URI} (^|/)(COPYRIGHT|INSTALL|README|htaccess)\.(txt|md|textile)$ [OR]
  # Block all http access to the default/uninstalled site-default directory
  RewriteCond %{REQUEST_URI} (^|/)site-default/
  # If any conditions above match, send a 403 forbidden response
  RewriteRule ^.*$ - [F,L]


  # ---------------------------------------------------------------------------
  # Block access to hidden files and directories with the exception of visible
  # content within the .well-known directory which should not be blocked.
  # ---------------------------------------------------------------------------
  RewriteCond %{REQUEST_URI} "!(^|/)\.well-known/([^./]+./?)+$" [NC]
  RewriteCond %{SCRIPT_FILENAME} -d [OR]
  RewriteCond %{SCRIPT_FILENAME} -f
  RewriteRule "(^|/)\." - [F]


  # ---------------------------------------------------------------------------
  # HTTPS enforcement. Uncomment to redirect to HTTPS. Various acme challenge
  # folders still need to use HTTP so ignore those directories.
  # ---------------------------------------------------------------------------
  # RewriteCond %{HTTPS} !=on
  # RewriteCond %{REQUEST_URI} !^/\.well-known/acme-challenge/
  # RewriteCond %{REQUEST_URI} !^/\.well-known/cpanel-dcv/[\w-]+$
  # RewriteCond %{REQUEST_URI} !^/\.well-known/pki-validation/[A-F0-9]{32}\.txt(?:\ Comodo\ DCV)?$
  # RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]


  # ---------------------------------------------------------------------------
  # WWW rewrites. Uncomment one or the other but not both!
  # First sets "proto" variable to "https" if https is used. This is used so we
  # don't have extra rewrites happening.
  # ---------------------------------------------------------------------------
  RewriteCond %{HTTPS} =on
  RewriteRule ^ - [env=proto:https]
  RewriteCond %{HTTPS} !=on
  RewriteRule ^ - [env=proto:http]
  # Uncomment to rewrite non-www to www.
  # RewriteCond %{HTTP_HOST} !^www\. [NC]
  # RewriteRule ^ %{ENV:proto}://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

  # Uncomment to rewrite www to non-www.
  # RewriteCond %{HTTP_HOST} .
  # RewriteCond %{HTTP_HOST} ^www\.(.*)$ [NC]
  # RewriteRule ^ %{ENV:proto}://www.%{HTTP_HOST}%{REQUEST_URI} [R=301,L]


  # ---------------------------------------------------------------------------
  # Redirect manager to an alternate domain - don't rename the ht.access file
  # in the manager folder to use this rule. Change 'example.com' as needed.
  # TODO: Are there docs about this? Do people commonly redirect manager to a complete other domain? Or remove this?
  # ---------------------------------------------------------------------------
  # RewriteCond %{HTTP_HOST} !^example\.com$ [NC]
  # RewriteCond %{REQUEST_URI} ^/manager [NC]
  # RewriteRule ^(.*)$ https://example.com/$1 [R=301,L]


  # ---------------------------------------------------------------------------
  # Friendly URLs.
  # Change MODX system setting "Use Friendly URLs" to "Yes".
  # https://docs.modx.com/revolution/2.x/administering-your-site/using-friendly-urls
  # ---------------------------------------------------------------------------
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d

  # TODO: Many CMSes ignore robots and favicon since these are typically not handled by the CMS, and it avoids lots of 
  # server log entries if these common files don't exist. Unless people WANT MODX handling 404/processing of these files??
  RewriteCond %{REQUEST_FILENAME} !(favicon\.ico|robots\.txt)

  # TODO: by explicitly ignoring /assets/ it may reduce server load. PW did this. But
  # if we completely ignore assets/, MODX may not be able to become the 404 handler in here?
  # RewriteCond %{REQUEST_FILENAME} !(^|/)assets/

  RewriteRule ^(.*)$ index.php?q=$1 [L,QSA]


  # ---------------------------------------------------------------------------
  # Correctly serve gzip compressed CSS and JS files.
  # Requires both mod_rewrite and mod_headers to be enabled.
  # TODO: drupal had this, should figure out how useful it may be to include here
  # ---------------------------------------------------------------------------
  <IfModule mod_headers.c>
    # Serve gzip CSS files if they exist and the client can accept them.
    RewriteCond %{HTTP:Accept-encoding} gzip
    RewriteCond %{REQUEST_FILENAME}\.gz -s
    RewriteRule ^(.*)\.css $1\.css\.gz [QSA]
    # Serve gzip JS files if they exist and the client can accept them.
    RewriteCond %{HTTP:Accept-encoding} gzip
    RewriteCond %{REQUEST_FILENAME}\.gz -s
    RewriteRule ^(.*)\.js $1\.js\.gz [QSA]
    # Serve correct content types, and prevent mod_deflate double gzip.
    RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
    RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]
    <FilesMatch "(\.js\.gz|\.css\.gz)$">
      # Serve correct encoding type.
      Header set Content-Encoding gzip
      # Force proxies to cache gzipped & non-gzipped css/js files separately.
      Header append Vary Accept-Encoding
    </FilesMatch>
  </IfModule>
</IfModule>
###############################################################################
# END MODX HTACCESS DIRECTIVES
###############################################################################
